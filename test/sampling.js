// Generated by CoffeeScript 1.6.3
(function() {
  var libShould, verkehr;

  libShould = require("should");

  verkehr = require("../");

  describe("Sampling", function() {
    var measures;
    measures = null;
    before(function(cb) {
      return measures = new verkehr.Measures(cb);
    });
    after(function(cb) {
      return measures.stop(cb);
    });
    it("should be extendable", function(cb) {
      var measureX, x;
      x = 23;
      measureX = function(cb) {
        return cb(null, x);
      };
      measures.addMeasure("superX", measureX);
      measures.once("sampled", function(sample) {
        sample.should.have.property("superX");
        sample.superX.should.eql(x);
        return cb();
      });
      return measures.start();
    });
    it("should accept only strings as name", function(cb) {
      var fakeFunc;
      fakeFunc = function() {
        return 42;
      };
      (function() {
        return measures.addMeasure(23, fakeFunc);
      }).should["throw"]("name is not a string");
      return cb();
    });
    it("should accept only functions as samplingFunction", function(cb) {
      (function() {
        return measures.addMeasure("test", 23);
      }).should["throw"]("samplingFunc is not a function");
      return cb();
    });
    return it("should be able to overwrite default measures", function(cb) {
      var fakeFunc;
      fakeFunc = function(cb) {
        return cb(null, 42);
      };
      measures.addMeasure("uuid", fakeFunc);
      measures.once("sampled", function(sample) {
        sample.uuid.should.eql(42);
        return cb();
      });
      return measures.start();
    });
  });

  describe("Problem during sampling", function() {
    var measures;
    measures = null;
    before(function(cb) {
      return measures = new verkehr.Measures(cb);
    });
    after(function(cb) {
      return measures.stop(cb);
    });
    return it("should bubble up as error event", function(cb) {
      var problem, problematicMeasuring;
      problem = "I am problematic";
      problematicMeasuring = function(cb) {
        return cb(problem);
      };
      measures.addMeasure("superX", problematicMeasuring);
      measures.on("error", function(err) {
        err.should.eql(problem);
        return cb();
      });
      return measures.start();
    });
  });

  describe("Connection problem", function() {
    var measures;
    measures = null;
    before(function(cb) {
      return measures = new verkehr.Measures(cb);
    });
    after(function(cb) {
      return measures.stop(cb);
    });
    return it("should emit a warning including the sample", function(cb) {
      measures.on("warning", function(warn) {
        warn.should.have.property("sample");
        warn.should.have.property("msg");
        warn.msg.should.startWith("Could not connect to verkehrsmonitor");
        return cb();
      });
      return measures.start();
    });
  });

}).call(this);
