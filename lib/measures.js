// Generated by CoffeeScript 1.6.3
(function() {
  var Measures, exports, libAsync, libEvents, libUsage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  libAsync = require("async");

  libUsage = require("usage");

  libEvents = require("events");

  module.exports = exports = Measures = (function(_super) {
    __extends(Measures, _super);

    Measures.prototype.measuring = {};

    Measures.prototype.names = [];

    Measures.prototype.samples = [];

    Measures.prototype.sample = null;

    Measures.prototype.repeat = true;

    Measures.prototype.timeoutId = null;

    function Measures(cb) {
      this.addMeasure("when", function(cb) {
        return cb(null, new Date());
      });
      this.addMeasure("cpu", function(cb) {
        return libUsage.lookup(process.pid, {
          keepHistory: false
        }, function(err, result) {
          if (err) {
            return cb(err);
          }
          return cb(null, result.cpu);
        });
      });
      this.addMeasure("memory", function(cb) {
        return cb(null, process.memoryUsage());
      });
      if (typeof cb === "function") {
        cb();
      }
    }

    Measures.prototype.addMeasure = function(name, samplingFunc) {
      if (!name || !samplingFunc) {
        return;
      }
      if (!(typeof name === "string") && !(name instanceof String)) {
        throw Error("name is not a string");
      }
      if (!(typeof samplingFunc === "function")) {
        throw Error("samplingFunc is not a function");
      }
      this.measuring[name] = samplingFunc;
      return this.names = Object.keys(this.measuring);
    };

    Measures.prototype.callSamplingFunc = function(name, cb) {
      var samplingFunc,
        _this = this;
      samplingFunc = this.measuring[name];
      return samplingFunc(function(err, result) {
        if (err) {
          return cb(err);
        }
        _this.sample[name] = result;
        return cb();
      });
    };

    Measures.prototype.takeSample = function(cb) {
      var _this = this;
      this.sample = {};
      return libAsync.each(this.names, this.callSamplingFunc.bind(this), function(err) {
        if (err) {
          return _this.emit("error", err);
        }
        _this.emit("sampled", _this.sample);
        _this.samples.push(_this.sample);
        return _this.timeoutId = setTimeout(cb, _this.samplingRate);
      });
    };

    Measures.prototype.start = function(samplingRate) {
      var _this = this;
      this.samplingRate = samplingRate != null ? samplingRate : 5000;
      return libAsync.doWhilst(this.takeSample.bind(this), (function() {
        return _this.repeat;
      }).bind(this), function(err) {
        if (err) {
          return _this.emit("error", err);
        }
        return _this.emit("finished", _this.samples);
      });
    };

    Measures.prototype.stop = function(cb) {
      this.repeat = false;
      clearTimeout(this.timeoutId);
      if (typeof cb === "function") {
        return cb();
      }
    };

    return Measures;

  })(libEvents.EventEmitter);

}).call(this);
