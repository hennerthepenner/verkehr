// Generated by CoffeeScript 1.6.3
(function() {
  var Server, exports, libEvents, libExpress, libHttp, libPath,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  libExpress = require("express");

  libHttp = require("http");

  libEvents = require("events");

  libPath = require("path");

  module.exports = exports = Server = (function(_super) {
    var STATE_STARTED, STATE_STARTING, STATE_STOPPED;

    __extends(Server, _super);

    Server.states = [STATE_STOPPED = 1, STATE_STARTING = 2, STATE_STARTED = 3];

    function Server(cb) {
      this.recentSamples = {};
      this.app = libExpress();
      this.app.use(libExpress.bodyParser());
      this.state = STATE_STOPPED;
      this.emit("initialized");
      this.emit("stopped");
      this.app.get("/data", this.handleData.bind(this));
      this.app.post("/sample", this.handleSample.bind(this));
      this.app.use(libExpress["static"](libPath.join(__dirname, "..", "client")));
      this.port = void 0;
      this.hostname = void 0;
      if (cb && typeof cb === "function") {
        cb();
      }
    }

    Server.prototype.start = function(port, hostname, backlog) {
      var _this = this;
      if (port == null) {
        port = 58241;
      }
      if (hostname == null) {
        hostname = void 0;
      }
      if (backlog == null) {
        backlog = void 0;
      }
      if (this.state === STATE_STOPPED) {
        this.httpServer = libHttp.createServer(this.app);
        this.state = STATE_STARTING;
        this.emit("starting");
        return this.httpServer.listen(port, hostname, backlog, function() {
          _this.port = port;
          _this.hostname = _this.httpServer.address().address;
          _this.state = STATE_STARTED;
          _this.emit("started");
          return _this.emit("info", "Monitoring server started on port " + port + ".");
        });
      }
    };

    Server.prototype.stop = function(cb) {
      if (this.state === STATE_STARTED) {
        this.httpServer.close();
        this.port = void 0;
        this.hostname = void 0;
        this.emit("info", "Monitoring server stopped.");
        this.state = STATE_STOPPED;
        this.emit("stopped");
      }
      if (cb && typeof cb === "function") {
        return cb();
      }
    };

    Server.prototype.handleData = function(req, res) {
      return res.send(200, JSON.stringify(this.recentSamples));
    };

    Server.prototype.handleSample = function(req, res) {
      var name, store, value, _ref, _results;
      store = this.recentSamples[req.body.uuid] = {};
      _ref = req.body;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        if (name !== "uuid") {
          store[name] = value;
        }
        this.emit("sample", req.body);
        _results.push(res.send(201));
      }
      return _results;
    };

    return Server;

  })(libEvents.EventEmitter);

}).call(this);
