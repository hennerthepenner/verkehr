// Generated by CoffeeScript 1.6.3
(function() {
  var conns, libTcp, maxConnections, measures, ok, prettyNum, requests, verkehr, _i, _results;

  verkehr = require("../../");

  libTcp = require("net");

  maxConnections = 1000;

  measures = new verkehr.Measures();

  conns = 0;

  requests = 0;

  ok = 0;

  measures.addMeasure("connections", function(cb) {
    return cb(null, conns);
  });

  measures.addMeasure("requests", function(cb) {
    return cb(null, requests);
  });

  measures.addMeasure("ok", function(cb) {
    return cb(null, ok);
  });

  measures.start();

  prettyNum = function(num) {
    if (num < 10) {
      return "000" + num;
    }
    if (num < 100) {
      return "00" + num;
    }
    if (num < 1000) {
      return "0" + num;
    }
    return "" + num;
  };

  (function() {
    _results = [];
    for (var _i = 0; 0 <= maxConnections ? _i < maxConnections : _i > maxConnections; 0 <= maxConnections ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).forEach(function() {
    var conn, expected, num1, num2, pointer, returned;
    num1 = Math.floor(Math.random() * 9999);
    num2 = Math.floor(Math.random() * 9999);
    expected = num1 + num2;
    returned = new Buffer(8);
    pointer = 0;
    conn = libTcp.connect({
      port: 9999
    }, function() {
      conns++;
      conn.write(prettyNum(num1) + prettyNum(num2));
      return requests++;
    });
    conn.on("data", function(chunk) {
      var b, result, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = chunk.length; _i < _len; _i++) {
        b = chunk[_i];
        returned[pointer] = b;
        pointer++;
        if (pointer === 8) {
          pointer = 0;
          result = parseInt(returned.toString());
          if (result === expected) {
            ok++;
          } else {
            console.log("Was " + result + " but expected " + expected);
          }
          num1 = Math.floor(Math.random() * 9999);
          num2 = Math.floor(Math.random() * 9999);
          expected = num1 + num2;
          _results.push(conn.write(prettyNum(num1) + prettyNum(num2)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    return conn.on("end", function() {
      return conns--;
    });
  });

}).call(this);
